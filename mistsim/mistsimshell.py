'''Main program that executes the simulation. Simulates effects of removing numbers of genes/genomes, and how many remain
Note: overwrites previously simulations within the same folder'''

import mistsim
import mistpopper
import mistchoppop
import mistallelediversity
import subprocess
import argparse
import glob
import os
import multiprocessing

def grapher(outpath, outfile, outgraph):
    '''makes graph for the simulation of increasing threshold and how many genes/genomes are remaining'''
    garg = ('Rscript', 'mistgraph.R',
            outpath, outfile, outgraph)
    subprocess.call(garg)

def popgraph(outpath, outpop, popgraph):
    '''makes graph for simulation of chopping off genes and looking at how many genomes are perfect'''
    parg = ('Rscript', 'mistpopgraph.R',
            outpath, outpop, popgraph)
    subprocess.call(parg)


def clusters(outpath, chopout, outcut, startchop, outfile, corecalls):
    '''creates adjusted wallace files, as well as the results of cutree and distance matrices'''
    if not os.access(outcut, os.F_OK):
        os.mkdir(outcut)
    carg = ['Rscript', 'mistcluster.R', corecalls,
            '--chopsyms', os.path.join(outpath, chopout),
            '--chopped', outfile,
            '--outpath', outpath,
            '--outcuts', outcut,
            '--startchops'] + startchop
    subprocess.call(carg)


def arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument('path', help='path to report file')
    parser.add_argument('-o', '--outpath', default='/home/phac/kye/misty/sim/', help='directory for the summary file')
    subparsers = parser.add_subparsers(dest='subfunction')
    a_parser = subparsers.add_parser('Sim')
    a_parser.add_argument('--genethreshhold', default=9999999, help='maximum number within a gene of missing genomes tolerated before gene is removed')
    a_parser.add_argument('--genomethreshhold', default=9999999, help='maximum number within a genome of missing genes tolerated before genome is removed')

    a_parser.add_argument('--startpop', default=None, help='start cutoff of genes missing this many genomes')
    a_parser.add_argument('--endpop', default=None, help='end cutoff of genes missing this many genomes')
    a_parser.add_argument('--genomemin', default=0, type=int, help='minimum number cutoff to start at for genome')
    a_parser.add_argument('--genemin', default=0, type=int, help='minimum number cutoff to start at for gene')

    a_parser.add_argument('--outfile', default='simulator.csv', help='name of file to be created')
    a_parser.add_argument('--outpop', default='popper.csv', help='name of file to be created for popper')
    a_parser.add_argument('--outgraph', default='graph.png', help='name of output graph file')
    a_parser.add_argument('--poppedgraph', default='popper.png', help='name of output popper graph file')

    b_parser = subparsers.add_parser('Chop')
    b_parser.add_argument('--startpop', default=None, help='start cutoff of genes missing this many genomes')
    b_parser.add_argument('--endpop', default=None, help='end cutoff of genes missing this many genomes')
    b_parser.add_argument('--startchop', default=None, nargs='+', help='number of genes chopped to compare to the first chop')
    b_parser.add_argument('--outfile', default='chopped.csv', help='end of the files generated for what genes are available')
    b_parser.add_argument('--outcut', default='cuts/', help='where to put the cutree results (helpful for debugging)')
    b_parser.add_argument('--chopout', default='chopsyms/', help='where to put symlinked genes for each chop (currently unused for anything, may remove)')
    b_parser.add_argument('--alleles', default='/home/phac/kye/autocreate/prissy/alleles/', help='location of gene alleles for symlinking')

    b_parser.add_argument('--distout', default='distances/', help='where to put the distance matrix files(UNUSED, REMOVE)')
    b_parser.add_argument('--corecalls', default='/home/phac/kye/autocreate/prissy/core_calls.csv', help='core calls csv file to use for generating distance matrices')
    b_parser.add_argument('--outtree', default='distancegraph', help='UNUSED, REMOVE')

    b_parser.add_argument('--cores', default=multiprocessing.cpu_count(), help='how many cores to use for multiprocessing, currently not implemented?')

    c_parser = subparsers.add_parser('Diversity')
    c_parser.add_argument('--file', default='0', help='lowest chopped.csv file, contains all genes needed')
    c_parser.add_argument('--chopout', default='chopsyms/', help='access the directory of symlinked gene files')
    c_parser.add_argument('--reportdir', default='/home/phac/kye/misty/mistout/', help='directory of all genome report files generated by MIST')
    c_parser.add_argument('--pristine', default='/home/phac/genomes/campylobacter/pristine/', help='pristine genomes directory, which this is made to test')
    c_parser.add_argument('--output', default='diversity/', help='where to place the files')
    c_parser.add_argument('--outfile', default='diversity.json', help='name of the output json file')
    c_parser.add_argument('--start', default=0, help='where to start, in terms of worst gene to compare')
    c_parser.add_argument('--end', default=10, help='where to end the comparison of gene alleles')
    return parser.parse_args()


def processSim(path, outpath, outfile, genemin, genethreshhold, genomemin, genomethreshhold,
               outgraph, outpop, startpop, endpop, poppedgraph):
    '''pretends to remove genes that are missing from more genomes than a given threshold,
    returns a graph of how many genomes and genes remain. Then pretends to remove genes in order from worst to best,
    and returns a graph of how many genomes are now perfect(i.e. no missing genes)'''
    print('Simulating threshold cutoffs...')
    mistsim.process(path, outpath, outfile, genemin, genethreshhold, genomemin, genomethreshhold)
    print('Graphing threshold csv...')
    grapher(outpath, outfile, outgraph)
    print('Popping genes...')
    mistpopper.process(path, outpath, outpop, startpop, endpop)
    print('Graphing popped csv...')
    popgraph(outpath, outpop, poppedgraph)

def processChop(path, outpath, outfile, outcut, startpop, endpop, startchop, chopout, alleles, distout, corecalls, outtree, cores):
    '''ranks the core genes from worst to best based on the number of genomes a gene is missing from,
    then produces distance matrices and clusters, then calculates adjusted wallace on them'''
    print('Chopping at given points')
    mistchoppop.process(path, outpath, outfile, startpop, endpop, startchop, chopout, alleles, cores)
    print('creating distance matrices and clustering genes...')
    clusters(outpath, chopout, outcut, startchop, outfile, corecalls)

def processDiversity(output, outfile, outpath, file, chopout, reportdir, pristine, start, end):
    '''creates a json file for counting occurances of every allele in every gene in every genome'''
    mistallelediversity.process(output, outfile, outpath, file, chopout, reportdir, pristine, start, end)

def main():
    args = arguments()
    if args.subfunction == 'Sim':
        processSim(args.path, args.outpath, args.outfile, args.genemin, args.genethreshhold,
                   args.genomemin, args.genomethreshhold, args.outgraph, args.outpop,
                   args.startpop, args.endpop, args.poppedgraph)

    if args.subfunction == 'Chop':
        processChop(args.path, args.outpath, args.outfile, args.outcut, args.startpop, args.endpop,
                    args.startchop, args.chopout, args.alleles, args.distout, args.corecalls, args.outtree, args.cores)

    if args.subfunction == 'Diversity':
        processDiversity(args.output, args.outfile, args.outpath, args.file, args.chopout, args.reportdir,
                         args.pristine, args.start, args.end)

if __name__ == '__main__':
    main()